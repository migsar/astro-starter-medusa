---
const strings = {
  labels: {
    email: 'Email',
    password: 'Password',
    login: 'Log In',
  },
};

const classes = {
  inputField: 'input input-bordered w-full mb-4',
};
---

<login-button>
  <form
    class="m-auto w-full md:w-1/3 flex flex-col justify-center items-center"
  >
    <div class="">
      <label for="email" class="block">{strings.labels.email}</label>
      <input id="email" type="email" name="email" class={classes.inputField} />
    </div>
    <div class="">
      <label for="password" class="block">{strings.labels.password}</label>
      <input
        id="password"
        type="password"
        name="password"
        class={classes.inputField}
      />
    </div>
    <div class="">
      <button type="button" class="btn">{strings.labels.login}</button>
    </div>
  </form>
</login-button>

<script>
  // Define the behaviour for our new type of HTML element.
  class LoginButton extends HTMLElement {
    constructor() {
      super();
      this.init();
    }

    async init() {
      if (!this.loginButton) {
        return;
      }

      this.loginButton.addEventListener('click', async () => {
        const res = await fetch('http://localhost:9000/store/auth', {
          method: 'POST',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: this.email,
            password: this.password,
          }),
        });

        if (res.status === 200) {
          window.location.href = '/';
        }
      });
    }

    get loginButton() {
      return this.querySelector('button');
    }

    get email() {
      const emailElement = this.querySelector('#email') as HTMLInputElement;

      return emailElement.value;
    }

    get password() {
      const passwordElement = this.querySelector(
        '#password'
      ) as HTMLInputElement;

      return passwordElement.value;
    }
  }

  customElements.define('login-button', LoginButton);
</script>
